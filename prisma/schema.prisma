generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  ADMIN
  EDITOR
  VIEWER
}

model User {
  id                       String             @id @unique @default(uuid())
  fullName                 String             @map("full_name")
  simpleId                 String             @unique @map("simple_id")
  email                    String             @unique
  active                   Boolean            @default(true)
  deleted                  Boolean            @default(false)
  lastLogin                DateTime?          @map("last_login")
  createdAt                DateTime           @default(now()) @map("created_at") @db.Timestamp()
  updatedAt                DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  userDetail               UserDetail?
  projects                 Project[]
  areas                    Area[]
  controllers              Controller[]
  usersInAreas             UsersInAreas[]
  firstRoommates           Roommate[]         @relation("firstRoommate")
  secondRoommates          Roommate[]         @relation("secondRoommate")
  roommateRequestsSent     RoommateRequests[] @relation("roommateRequestsSent")
  roommateRequestsReceived RoommateRequests[] @relation("roommateRequestsReceived")

  @@index([id])
  @@index([simpleId])
  @@map("user")
}

model UserDetail {
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @unique @map("user_id")
  fistName      String  @map("first_name")
  secondName    String? @map("second_name")
  firstSurname  String  @map("first_surname")
  secondSurname String? @map("second_surname")
  country       Country @relation(fields: [countryId], references: [id])
  countryId     Int     @map("country_id")

  @@map("user_detail")
}

model Country {
  id           Int          @id @default(autoincrement())
  name         String
  code         String       @unique @db.VarChar(3)
  prefix       String       @unique @db.VarChar(3)
  currencyCode String       @unique @map("currency_code") @db.VarChar(3)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp()
  users        UserDetail[]

  @@map("country")
}

model Project {
  id              String            @id @unique @default(uuid())
  simpleId        String            @unique @map("simple_id")
  createdBy       User              @relation(fields: [createdById], references: [id])
  createdById     String            @map("created_by_id")
  name            String
  description     String?
  position        Json?
  edges           Json?
  active          Boolean           @default(true)
  deleted         Boolean           @default(false)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp()
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  areas           Area[]
  controllers     Controller[]
  areasInProjects AreasInProjects[]

  @@index([simpleId])
  @@map("project")
}

model Area {
  id              String            @id @unique @default(uuid())
  simpleId        String            @unique @map("simple_id")
  createdBy       User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById     String            @map("created_by_id")
  project         Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String?           @map("projec_id")
  typeArea        TypeArea          @relation(fields: [typeAreaId], references: [id], onDelete: Cascade)
  typeAreaId      String            @map("type_area_id")
  name            String
  position        Json?
  edges           Json?
  active          Boolean           @default(true)
  deleted         Boolean           @default(false)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp()
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  controllers     Controller[]
  usersInAreas    UsersInAreas[]
  areasInProjects AreasInProjects[]

  @@map("area")
}

model Controller {
  id               String         @id @unique @default(uuid())
  simpleId         String         @unique @map("simple_id")
  createdBy        User           @relation(fields: [createdById], references: [id])
  createdById      String         @map("created_by_id")
  project          Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String?        @map("project_id")
  area             Area?          @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId           String?        @map("area_id")
  typeController   TypeController @relation(fields: [typeControllerId], references: [id], onDelete: Cascade)
  typeControllerId String         @map("type_controller_id")
  name             String
  position         Json?
  edges            Json?
  active           Boolean        @default(true)
  deleted          Boolean        @default(false)
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  devices          Device[]
  data             Data[]

  @@index([simpleId])
  @@map("controller")
}

model Device {
  id           String      @id @unique @default(uuid())
  simpleId     String      @unique @map("simple_id")
  controller   Controller? @relation(fields: [controllerId], references: [id], onDelete: Cascade)
  controllerId String?     @map("controller_id")
  typeDevice   TypeDevice  @relation(fields: [typeDeviceId], references: [id], onDelete: Cascade)
  typeDeviceId String      @map("type_device_id")
  name         String
  value        Int?        @default(0)
  position     Json?
  edges        Json?
  active       Boolean     @default(false)
  deleted      Boolean     @default(false)
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp()

  @@index([simpleId])
  @@map("device")
}

model Data {
  id           String     @id @unique @default(uuid())
  controller   Controller @relation(fields: [controllerId], references: [id])
  controllerId String     @map("controller_id")
  data         Json
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp()

  @@index([controllerId])
  @@map("data")
}

model TypeArea {
  id    String @id @unique @default(uuid())
  name  String
  icon  String
  color String @default("#F5F5F5")
  areas Area[]

  @@map("type_area")
}

model TypeController {
  id          String       @id @unique @default(uuid())
  key         String       @unique
  name        String
  controllers Controller[]

  @@index([key])
  @@map("type_controller")
}

model TypeDevice {
  id      String   @id @unique @default(uuid())
  key     String   @unique
  label   String
  devices Device[]

  @@index([key])
  @@map("type_device")
}

model RoommateRequests {
  sender     User     @relation("roommateRequestsSent", fields: [senderId], references: [id])
  senderId   String   @map("sender_id")
  receiver   User     @relation("roommateRequestsReceived", fields: [receiverId], references: [id])
  receiverId String   @map("receiver_id")
  canceled   Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()

  @@id([senderId, receiverId])
  @@map("roommate_requests")
}

model Roommate {
  firstRoommate    User     @relation("firstRoommate", fields: [firstRoommateId], references: [id])
  firstRoommateId  String   @map("first_roommate_id")
  secondRoommate   User     @relation("secondRoommate", fields: [secondRoommateId], references: [id])
  secondRoommateId String   @map("secondary_roommate_id")
  canceled         Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()

  @@id([firstRoommateId, secondRoommateId])
  @@map("roommate")
}

model UsersInAreas {
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  area       Area     @relation(fields: [areaId], references: [id])
  areaId     String   @map("area_id")
  role       role     @default(VIEWER)
  active     Boolean  @default(true)
  deleted    Boolean  @default(false)
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()

  @@id([userId, areaId])
  @@map("users_in_areas")
}

model AreasInProjects {
  area       Area     @relation(fields: [areaId], references: [id])
  areaId     String   @map("area_id")
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String   @map("project_id")
  role       role     @default(VIEWER)
  active     Boolean  @default(true)
  deleted    Boolean  @default(false)
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()

  @@id([areaId, projectId])
  @@map("areas_in_projects")
}
